@using MattParkerDev.WebUI.Services
@using System.Net
@inject HttpClient Http

<div class="my-2 pt-0 md:!my-8 md:!pt-2">
	<SeoHeader Title="@_blogTitle" Description="@_blogDescription" Keywords="_keywords"/>
	<MudIconButton Href="blog" Size="Size.Large" Icon="@Icons.Material.Filled.ArrowBack"></MudIconButton>
	@if (_publishedDate is not null)
	{
		<span class="hidden md:inline">
			<MudText Style="font-style: italic" Typo="Typo.subtitle1" GutterBottom="true">Published by Matt Parker on @_publishedDate.Value.ToLocalTime().ToString("f")</MudText>
		</span>
		<span class="inline md:hidden">
			<MudText Style="font-style: italic" Typo="Typo.subtitle1" GutterBottom="true">Matt Parker: @_publishedDate.Value.ToLocalTime().ToString("ddd, dd MMM yyyy HH:mm")</MudText>
		</span>
	}
	<MudText Class="d-flex mb-4" Typo="Typo.h3" GutterBottom="false">@_blogTitle</MudText>
	<hr class="border-b-2 border-primary w-64 mb-16"/>

	<MudMarkdown Styling="@ThemeProvider.MarkdownStyling" Value="@_markdownContent"/>
	@if (_blogExists is true)
	{
		<GiscusWidget/>
	}
</div>

<style>
	.mud-markdown-body pre code.hljs {
		margin-bottom: 1.25em;
	}
	.mud-markdown-body .mud-link {
		color: var(--mud-palette-primary-darken) !important;
		text-decoration: underline;
	}
	.mud-markdown-body .mud-link:hover {
		color: var(--mud-palette-primary-darken) !important;
		text-decoration: none;
	}
	div.mud-container .mud-markdown-body p code {
		font-family: inherit;
	}
	div.mud-container .mud-markdown-body blockquote {
		border-left: 4px solid var(--mud-palette-secondary-darken);
		padding-left: 1em;
		margin-left: 0;
	}
</style>

@code {

	[Parameter]
	public string BlogSlug { get; set; } = null!;

	private string _blogTitle = string.Empty;
	private string _blogDescription = string.Empty;
	private string _markdownContent = string.Empty;
	private DateTimeOffset? _publishedDate;
	private List<string> _keywords = [];
	private bool? _blogExists;

	protected override async Task OnInitializedAsync()
	{
		var blog = BlogService.GetBlogBySlug(BlogSlug);
		if (blog is null)
		{
			_blogTitle = "404 Not Found 😢";
			_markdownContent = "Head back to [blogs!](/blog)";
			_blogExists = false;
			return;
		}
		_blogExists = true;
		_blogTitle = blog.Title;
		_blogDescription = blog.Description;
		_keywords = blog.Keywords;
		_publishedDate = blog.PublishedDate;

		try
		{
			var blogContent = await Http.GetStringAsync($"_blogs/{blog.Slug}/blog.md");
			_markdownContent = blogContent;
		}
		catch (HttpRequestException e) when (e.StatusCode == HttpStatusCode.NotFound)
		{
			_blogExists = false;
			_blogDescription = string.Empty;
			_publishedDate = null;
			_blogTitle = "404 Not Found 😢";
			_markdownContent = "Head back to [blogs!](/blog)";
		}
	}

}
