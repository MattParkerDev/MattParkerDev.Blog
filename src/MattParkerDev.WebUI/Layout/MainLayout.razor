@using MattParkerDev.WebUI.Models
@using MudBlazor.Utilities
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager

<MudThemeProvider IsDarkMode="@_isDarkMode" Theme="@_theme"/>
<MudDialogProvider/>
<MudSnackbarProvider />

<MudLayout>
    
        
    <MudAppBar Elevation="0" DisableGutters="false">
        <MudButton Class="d-none d-sm-flex" Href="/" Color="Color.Inherit">
            <MudIcon Class="mr-1" Icon="@Icons.Material.Filled.Home" Title="Home"></MudIcon>
            <MudText Typo="Typo.h6">MattParkerDev</MudText>
        </MudButton>

        <MudButton Variant="@GetNavButtonVariant(AppPage.Home)" Class="d-flex d-sm-none pa-1 ml-2" Style="min-width: 32px;" Color="@GetNavButtonColour(AppPage.Home)" Icon="@Icons.Material.Filled.Home" Href="/">
            <MudIcon Class="pa-0 ma-0" Icon="@Icons.Material.Filled.Home"/>
        </MudButton>

        <MudSpacer/>

        <MudButton Variant="@GetNavButtonVariant(AppPage.Home)" Class="mx-1 px-3 d-none d-sm-flex" Color="@GetNavButtonColour(AppPage.Home)" IconColor="Color.Inherit" StartIcon="@Icons.Material.Filled.Home" Href="/">Home</MudButton>
        <MudButton Variant="@GetNavButtonVariant(AppPage.About)" Class="@GetNavButtonClass(AppPage.About)" Color="@GetNavButtonColour(AppPage.About)" IconColor="Color.Inherit" StartIcon="@Icons.Material.Filled.Info" Href="about">About</MudButton>
        <MudButton Variant="@GetNavButtonVariant(AppPage.Portfolio)" Class="@GetNavButtonClass(AppPage.Portfolio)" Color="@GetNavButtonColour(AppPage.Portfolio)" IconColor="Color.Inherit" StartIcon="@Icons.Material.Filled.Article" Href="portfolio">Portfolio</MudButton>
        <MudButton Variant="@GetNavButtonVariant(AppPage.Blog)" Class="@GetNavButtonClass(AppPage.Blog)" Color="@GetNavButtonColour(AppPage.Blog)" IconColor="Color.Inherit" StartIcon="@Icons.Material.Filled.Newspaper" Href="blog">Blog</MudButton>

        <MudSpacer/>

        <MudIconButton Class="pl-1" Title="Toggle dark mode" Icon="@(_isDarkMode ? @Icons.Material.Rounded.LightMode : @Icons.Material.Outlined.DarkMode)" Color="Color.Inherit" OnClick="@ToggleDarkMode"/>
        <MudIconButton Class="d-none d-md-flex" Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Link="https://github.com/MattParkerDev" Target="_blank"/>
    </MudAppBar>
 
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-16 pt-16 d-none d-sm-block">
            @Body
        </MudContainer>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-8 pt-8 d-block d-sm-none">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool _isDarkMode = false;

    private void ToggleDarkMode()
    {
        _isDarkMode = !_isDarkMode;
    }
    
    private string GetNavButtonClass(AppPage page)
    {
        //var classString = page == GetCurrentPageAsEnum() ? "mud-chip-text mud-chip-color-primary mx-1 px-3" : "mx-1 px-3";
        var classString = "mx-1 px-3";
        return classString;
    }
    
    private Variant GetNavButtonVariant(AppPage page)
    {
        return page == GetCurrentPageAsEnum() ? Variant.Filled : Variant.Text;
    }
    
    private Color GetNavButtonColour(AppPage page)
    {
        return page == GetCurrentPageAsEnum() ? Color.Secondary : Color.Inherit;
    }
    
    private AppPage GetCurrentPageAsEnum()
    {
        var currentPathString = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        // Quick and dirty
        if (currentPathString.StartsWith("blog"))
        {
            currentPathString = "blog";
        }
        Enum.TryParse(currentPathString, true, out AppPage currentPage);

        return currentPage;
    }
    
    private readonly MudTheme _theme = new MudTheme()
    {
        Palette = new PaletteLight()
        {
            Primary = "#263238", // A deep, charcoal grey for a sophisticated primary color
            Secondary = "#6fa8dc",  // A muted blue-grey for an elegant secondary color
            AppbarBackground = "#446787", // A slightly lighter grey for the app bar
            AppbarText = "#ffffff", // A light grey for contrast on the app bar
            TextPrimary = "#212121", // Dark grey for primary text, ensuring readability
            TextSecondary = "#727272", // Medium grey for secondary text
            Background = "#eceff1", // A soft, light grey for the overall background
            Surface = "#ffffff", // White for surfaces like cards, menus
            ActionDefault = "#263238", // Use primary color for action elements
            DrawerBackground = "#cfd8dc", // Light blue-grey for the drawer background
        },
        PaletteDark = new PaletteDark()
        {
            Primary = "#263238", // Consistent primary color in dark mode
            Secondary = "#546e7a", // Consistent secondary color in dark mode
            Background = "#102027", // Darker grey for the overall background
            Surface = "#1c313a", // Slightly lighter grey for surfaces
            AppbarBackground = "#263238", // Consistent with primary color
            TextPrimary = "#eceff1", // Light grey for primary text
            TextSecondary = "#b0bec5", // Lighter grey for secondary text
        },
        LayoutProperties = new LayoutProperties()
        {
            DefaultBorderRadius = "4px", // Rounded edges for components
        },
        Typography = new Typography()
        {
            Default = new Default()
            {
                FontFamily = new[] { "Roboto", "Helvetica", "Arial", "sans-serif" },
                FontSize = "1rem",
                FontWeight = 400,
                LineHeight = 1.5,
                LetterSpacing = "0.00938em",
            },
    // Additional typography settings as needed
        },
    };


}
