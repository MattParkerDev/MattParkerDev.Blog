@using MattParkerDev.WebUI.Models
@using MudBlazor.Utilities
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudThemeProvider IsDarkMode="@_isDarkMode" Theme="@_themeManager.Theme"/>
<MudDialogProvider/>
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0" Dense="true">
        <MudButton Href="/" Color="Color.Inherit">
            <MudIcon Class="mr-1" Icon="@Icons.Material.Filled.Home"></MudIcon>
            <MudText Typo="Typo.h6">MattParkerDev</MudText>
        </MudButton>
        @if (_showThemeManagerButton)
        {
            <MudThemeManagerButton OnClick="@((e) => OpenThemeManager(true))" />
        }
        <MudThemeManager Open="_themeManagerOpen" OpenChanged="OpenThemeManager" Theme="_themeManager" ThemeChanged="UpdateTheme" />
        
        <MudSpacer/>
        <MudButton Variant="@GetNavButtonVariant(AppPage.Home)"         Class="@GetNavButtonClass(AppPage.Home)"        Color="@GetNavButtonColour(AppPage.Home)"        IconColor="Color.Inherit" StartIcon="@Icons.Material.Filled.Home"      Href="/" >Home</MudButton>
        <MudButton Variant="@GetNavButtonVariant(AppPage.About)"        Class="@GetNavButtonClass(AppPage.About)"       Color="@GetNavButtonColour(AppPage.About)"       IconColor="Color.Inherit" StartIcon="@Icons.Material.Filled.Info"      Href="about" >About</MudButton>
        <MudButton Variant="@GetNavButtonVariant(AppPage.Portfolio)"    Class="@GetNavButtonClass(AppPage.Portfolio)"   Color="@GetNavButtonColour(AppPage.Portfolio)"   IconColor="Color.Inherit" StartIcon="@Icons.Material.Filled.Article"   Href="portfolio" >Portfolio</MudButton>
        <MudButton Variant="@GetNavButtonVariant(AppPage.Blog)"         Class="@GetNavButtonClass(AppPage.Blog)"        Color="@GetNavButtonColour(AppPage.Blog)"        IconColor="Color.Inherit" StartIcon="@Icons.Material.Filled.Newspaper" Href="blog" >Blog</MudButton>
        <MudSpacer/>   
        
        <MudTooltip Duration="1000" Text="@(_isDarkMode ? "Switch to Light Theme" : "Switch to Dark Theme")">
            <MudIconButton Icon="@(_isDarkMode ? @Icons.Material.Rounded.LightMode : @Icons.Material.Outlined.DarkMode)" Color="Color.Inherit" OnClick="@ToggleDarkMode"/>
        </MudTooltip>
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Link="https://github.com/MattParkerDev" Target="_blank"/>
    </MudAppBar>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-16 pt-16">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool _isDarkMode = true;
    int _clickCounter = 0;
    System.Timers.Timer _timer = new System.Timers.Timer(3000);
    
    protected override void OnInitialized()
    {
        StateHasChanged();

        _themeManager.Theme = _theme;
        // Required for MudBlazor Theme Manager
        StateHasChanged();
        
        _timer.Elapsed += (sender, args) =>
        {
            ResetCounter();
        };
    }

    private void ToggleDarkMode()
    {
        _isDarkMode = !_isDarkMode;
        if (_clickCounter == 0)
        {
            _timer.Enabled = true;
        }
        else if (_clickCounter == 5)
        {
            _timer.Enabled = false;
            _showThemeManagerButton = true;
            Snackbar.Add("Theme Manager Unlocked", Severity.Success, config =>
            {
                config.VisibleStateDuration = 2000;
                config.HideTransitionDuration = 500;
                config.ShowTransitionDuration = 500;
            });
        }
        _clickCounter++;
    }
    
    private void ResetCounter()
    {
        _clickCounter = 0;
    }
    
    private string GetNavButtonClass(AppPage page)
    {
        //var classString = page == GetCurrentPageAsEnum() ? "mud-chip-text mud-chip-color-primary mx-1 px-3" : "mx-1 px-3";
        var classString = "mx-1 px-3";
        return classString;
    }
    
    private Variant GetNavButtonVariant(AppPage page)
    {
        return page == GetCurrentPageAsEnum() ? Variant.Filled : Variant.Text;
    }
    
    private Color GetNavButtonColour(AppPage page)
    {
        return page == GetCurrentPageAsEnum() ? Color.Secondary : Color.Inherit;
    }
    
    private AppPage GetCurrentPageAsEnum()
    {
        var currentPathString = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        Enum.TryParse(currentPathString, true, out AppPage currentPage);

        return currentPage;
    }
    
    private readonly MudTheme _theme = new MudTheme()
    {
        Palette = new PaletteLight()
        {
            AppbarBackground = new MudColor("#3b3947ff"),
            Secondary =  new MudColor("#5759d5ff")
        },
        PaletteDark = new PaletteDark()
        {
            Secondary = new MudColor("#5759d5ff")
        },
        LayoutProperties = new LayoutProperties()
        {
            //DefaultBorderRadius = "4px"
        },
        Typography = new Typography()
        {
        },
    };
    

    private ThemeManagerTheme _themeManager = new ThemeManagerTheme();
    private bool _showThemeManagerButton = false;
    private bool _themeManagerOpen = false;

    void OpenThemeManager(bool value)
    {
        _themeManagerOpen = value;
    }

    void UpdateTheme(ThemeManagerTheme value)
    {
        _themeManager = value;
        StateHasChanged();
    }
}